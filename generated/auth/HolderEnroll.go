// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package auth

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// HolderEnroll is the `holderEnroll` instruction.
type HolderEnroll struct {
	Bump       *uint8
	HolderHash *string
	AccessCode *string

	// [0] = [WRITE] enrollment
	//
	// [1] = [WRITE, SIGNER] oracle
	//
	// [2] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewHolderEnrollInstructionBuilder creates a new `HolderEnroll` instruction builder.
func NewHolderEnrollInstructionBuilder() *HolderEnroll {
	nd := &HolderEnroll{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetBump sets the "bump" parameter.
func (inst *HolderEnroll) SetBump(bump uint8) *HolderEnroll {
	inst.Bump = &bump
	return inst
}

// SetHolderHash sets the "holderHash" parameter.
func (inst *HolderEnroll) SetHolderHash(holderHash string) *HolderEnroll {
	inst.HolderHash = &holderHash
	return inst
}

// SetAccessCode sets the "accessCode" parameter.
func (inst *HolderEnroll) SetAccessCode(accessCode string) *HolderEnroll {
	inst.AccessCode = &accessCode
	return inst
}

// SetEnrollmentAccount sets the "enrollment" account.
func (inst *HolderEnroll) SetEnrollmentAccount(enrollment ag_solanago.PublicKey) *HolderEnroll {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(enrollment).WRITE()
	return inst
}

// GetEnrollmentAccount gets the "enrollment" account.
func (inst *HolderEnroll) GetEnrollmentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOracleAccount sets the "oracle" account.
func (inst *HolderEnroll) SetOracleAccount(oracle ag_solanago.PublicKey) *HolderEnroll {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *HolderEnroll) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *HolderEnroll) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *HolderEnroll {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *HolderEnroll) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst HolderEnroll) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_HolderEnroll,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst HolderEnroll) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *HolderEnroll) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
		if inst.HolderHash == nil {
			return errors.New("HolderHash parameter is not set")
		}
		if inst.AccessCode == nil {
			return errors.New("AccessCode parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Enrollment is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *HolderEnroll) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("HolderEnroll")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("      Bump", *inst.Bump))
						paramsBranch.Child(ag_format.Param("HolderHash", *inst.HolderHash))
						paramsBranch.Child(ag_format.Param("AccessCode", *inst.AccessCode))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   enrollment", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       oracle", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj HolderEnroll) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `HolderHash` param:
	err = encoder.Encode(obj.HolderHash)
	if err != nil {
		return err
	}
	// Serialize `AccessCode` param:
	err = encoder.Encode(obj.AccessCode)
	if err != nil {
		return err
	}
	return nil
}
func (obj *HolderEnroll) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `HolderHash`:
	err = decoder.Decode(&obj.HolderHash)
	if err != nil {
		return err
	}
	// Deserialize `AccessCode`:
	err = decoder.Decode(&obj.AccessCode)
	if err != nil {
		return err
	}
	return nil
}

// NewHolderEnrollInstruction declares a new HolderEnroll instruction with the provided parameters and accounts.
func NewHolderEnrollInstruction(
	// Parameters:
	bump uint8,
	holderHash string,
	accessCode string,
	// Accounts:
	enrollment ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *HolderEnroll {
	return NewHolderEnrollInstructionBuilder().
		SetBump(bump).
		SetHolderHash(holderHash).
		SetAccessCode(accessCode).
		SetEnrollmentAccount(enrollment).
		SetOracleAccount(oracle).
		SetSystemProgramAccount(systemProgram)
}
