// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package auth

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
)

type Enrollment struct {
	Holder     string
	AccessCode string
	CipherKey  string
}

var EnrollmentDiscriminator = [8]byte{249, 210, 64, 145, 197, 241, 57, 51}

func (obj Enrollment) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EnrollmentDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Holder` param:
	err = encoder.Encode(obj.Holder)
	if err != nil {
		return err
	}
	// Serialize `AccessCode` param:
	err = encoder.Encode(obj.AccessCode)
	if err != nil {
		return err
	}
	// Serialize `CipherKey` param:
	err = encoder.Encode(obj.CipherKey)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Enrollment) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EnrollmentDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[249 210 64 145 197 241 57 51]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Holder`:
	err = decoder.Decode(&obj.Holder)
	if err != nil {
		return err
	}
	// Deserialize `AccessCode`:
	err = decoder.Decode(&obj.AccessCode)
	if err != nil {
		return err
	}
	// Deserialize `CipherKey`:
	err = decoder.Decode(&obj.CipherKey)
	if err != nil {
		return err
	}
	return nil
}
