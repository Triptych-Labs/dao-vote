// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dao

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateDao is the `createDao` instruction.
type CreateDao struct {
	Bump        *uint8
	DaoIndex    *int64
	Name        *string
	Description *string

	// [0] = [SIGNER] oracle
	//
	// [1] = [WRITE] dao
	//
	// [2] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateDaoInstructionBuilder creates a new `CreateDao` instruction builder.
func NewCreateDaoInstructionBuilder() *CreateDao {
	nd := &CreateDao{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetBump sets the "bump" parameter.
func (inst *CreateDao) SetBump(bump uint8) *CreateDao {
	inst.Bump = &bump
	return inst
}

// SetDaoIndex sets the "daoIndex" parameter.
func (inst *CreateDao) SetDaoIndex(daoIndex int64) *CreateDao {
	inst.DaoIndex = &daoIndex
	return inst
}

// SetName sets the "name" parameter.
func (inst *CreateDao) SetName(name string) *CreateDao {
	inst.Name = &name
	return inst
}

// SetDescription sets the "description" parameter.
func (inst *CreateDao) SetDescription(description string) *CreateDao {
	inst.Description = &description
	return inst
}

// SetOracleAccount sets the "oracle" account.
func (inst *CreateDao) SetOracleAccount(oracle ag_solanago.PublicKey) *CreateDao {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracle).SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *CreateDao) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDaoAccount sets the "dao" account.
func (inst *CreateDao) SetDaoAccount(dao ag_solanago.PublicKey) *CreateDao {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(dao).WRITE()
	return inst
}

// GetDaoAccount gets the "dao" account.
func (inst *CreateDao) GetDaoAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateDao) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateDao {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateDao) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst CreateDao) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateDao,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateDao) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateDao) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
		if inst.DaoIndex == nil {
			return errors.New("DaoIndex parameter is not set")
		}
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
		if inst.Description == nil {
			return errors.New("Description parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Dao is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateDao) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateDao")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("       Bump", *inst.Bump))
						paramsBranch.Child(ag_format.Param("   DaoIndex", *inst.DaoIndex))
						paramsBranch.Child(ag_format.Param("       Name", *inst.Name))
						paramsBranch.Child(ag_format.Param("Description", *inst.Description))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       oracle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          dao", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj CreateDao) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `DaoIndex` param:
	err = encoder.Encode(obj.DaoIndex)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Description` param:
	err = encoder.Encode(obj.Description)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateDao) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `DaoIndex`:
	err = decoder.Decode(&obj.DaoIndex)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Description`:
	err = decoder.Decode(&obj.Description)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateDaoInstruction declares a new CreateDao instruction with the provided parameters and accounts.
func NewCreateDaoInstruction(
	// Parameters:
	bump uint8,
	daoIndex int64,
	name string,
	description string,
	// Accounts:
	oracle ag_solanago.PublicKey,
	dao ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateDao {
	return NewCreateDaoInstructionBuilder().
		SetBump(bump).
		SetDaoIndex(daoIndex).
		SetName(name).
		SetDescription(description).
		SetOracleAccount(oracle).
		SetDaoAccount(dao).
		SetSystemProgramAccount(systemProgram)
}
